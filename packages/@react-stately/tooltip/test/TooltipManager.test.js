import {TooltipManager} from '../';

describe('TooltipManager', () => {

  it('can show a tooltip', async function () {
    let tooltipManager = new TooltipManager();
    let setOpenSpy = jest.fn();
    let tooltip = {open: false, setOpen: setOpenSpy, tooltipManager};
    let triggerId = 'triggerId-1';
    expect(tooltipManager.visibleTooltips).toBeNull();
    expect(tooltipManager.hoverHideTimeout).toBeNull();
    expect(tooltipManager.hoverShowTimeout).toBeNull();
    tooltipManager.showTooltipDelayed(tooltip, triggerId);
    await new Promise((a) => setTimeout(a, 200));
    expect(setOpenSpy).toHaveBeenCalledWith(true);
    expect(tooltipManager.visibleTooltips).toStrictEqual({triggerId, state: tooltip});
    expect(tooltipManager.hoverHideTimeout).toBeNull();
    expect(tooltipManager.hoverShowTimeout).toBeNull();
  });
  
  // it('it can hide the currently visible tooltip', () => {
  //   let tooltipManager = new TooltipManager();
  //   let tooltip = {open: false, setOpen: () => jest.fn(), tooltipManager};
  //   tooltipManager.showTooltip(tooltip);
  //   tooltipManager.hideTooltip();
  //   expect(tooltipManager.visibleTooltips).toBeNull();
  //   expect(tooltipManager.hoverHideTimeout).toBeNull();
  //   expect(tooltipManager.hoverShowTimeout).toBeNull();
  // });
  // it('can delay show a tooltip', () => {
  //   jest.useFakeTimers();
  //   let tooltipManager = new TooltipManager();
  //   let setOpenSpy = jest.fn();
  //   let tooltip = {open: false, setOpen: setOpenSpy, tooltipManager};
  //   let triggerId = 'triggerId-1';
  //   expect(tooltipManager.visibleTooltips).toBeNull();
  //   expect(tooltipManager.hoverHideTimeout).toBeNull();
  //   expect(tooltipManager.hoverShowTimeout).toBeNull();
  //   tooltipManager.showTooltipDelayed(tooltip, triggerId);
  //   expect(tooltipManager.visibleTooltips).toBeNull();
  //   expect(tooltipManager.hoverHideTimeout).toBeNull();
  //   expect(tooltipManager.hoverShowTimeout).toBeTruthy();
  //   expect(setTimeout).toHaveBeenCalledWith(expect.any(Function), 200);
  //   jest.runAllTimers();
  //   expect(setOpenSpy).toHaveBeenCalledWith(true);
  //   expect(tooltipManager.visibleTooltips).toStrictEqual({triggerId, state: tooltip});
  //   expect(tooltipManager.hoverHideTimeout).toBeNull();
  //   expect(tooltipManager.hoverShowTimeout).toBeNull();
  // });
  // it('can delay hide a tooltip', () => {
  //   jest.useFakeTimers();
  //   let tooltipManager = new TooltipManager();
  //   let setOpenSpy = jest.fn();
  //   let tooltip = {open: false, setOpen: setOpenSpy, tooltipManager};
  //   let triggerId = 'triggerId-1';
  //   tooltipManager.showTooltipDelayed(tooltip, triggerId);
  //   jest.runAllTimers();
  //   expect(setOpenSpy).toHaveBeenCalledWith(true);
  //   expect(tooltipManager.visibleTooltips).toStrictEqual({triggerId, state: tooltip});
  //   expect(tooltipManager.hoverHideTimeout).toBeNull();
  //   expect(tooltipManager.hoverShowTimeout).toBeNull();
  //   tooltipManager.hideTooltipDelayed(tooltip, triggerId);
  //   expect(tooltipManager.visibleTooltips).toStrictEqual({triggerId, state: tooltip});
  //   expect(tooltipManager.hoverHideTimeout).toBeTruthy();
  //   expect(tooltipManager.hoverShowTimeout).toBeNull();
  //   expect(setTimeout).toHaveBeenCalledWith(expect.any(Function), 200);
  //   jest.runAllTimers();
  //   expect(setOpenSpy).toHaveBeenCalledWith(false);
  //   expect(tooltipManager.visibleTooltips).toBeNull();
  //   expect(tooltipManager.hoverHideTimeout).toBeNull();
  //   expect(tooltipManager.hoverShowTimeout).toBeNull();
  // });
  // it('will close the currently open tooltip when showing a new one', () => { // useful when tooltips are opened by clicks
  //   let tooltipManager = new TooltipManager();
  //   let setOpenSpy = jest.fn();
  //   let tooltip = {open: false, setOpen: setOpenSpy, tooltipManager};
  //   let triggerId = 'triggerId-1';
  //   tooltipManager.showTooltip(tooltip, triggerId);
  //   let setOpenSpy2 = jest.fn();
  //   let tooltip2 = {open: false, setOpen: setOpenSpy2, tooltipManager};
  //   let triggerId2 = 'triggerId-2';
  //   tooltipManager.showTooltip(tooltip2, triggerId2);
  //   expect(setOpenSpy).toHaveBeenLastCalledWith(false);
  //   expect(setOpenSpy2).toHaveBeenCalledWith(true);
  //   expect(tooltipManager.visibleTooltips).toStrictEqual({triggerId: triggerId2, state: tooltip2});
  //   expect(tooltipManager.hoverHideTimeout).toBeNull();
  //   expect(tooltipManager.hoverShowTimeout).toBeNull();
  // });
  // it('will not show the tooltip if hidden before the delayed show completes', () => { // useful for hover on -> click some other one
  //   jest.useFakeTimers();
  //   let tooltipManager = new TooltipManager();
  //   let setOpenSpy = jest.fn();
  //   let tooltip = {open: false, setOpen: setOpenSpy, tooltipManager};
  //   let triggerId = 'triggerId-1';
  //   tooltipManager.showTooltipDelayed(tooltip, triggerId);
  //   expect(tooltipManager.hoverShowTimeout).not.toBeNull();
  //   expect(tooltipManager.hoverHideTimeout).toBeNull();
  //   jest.advanceTimersByTime(100);
  //   expect(tooltipManager.visibleTooltips).toBeNull();
  //   expect(tooltipManager.hoverShowTimeout).not.toBeNull();
  //   expect(tooltipManager.hoverHideTimeout).toBeNull();
  //   tooltipManager.hideTooltip();
  //   expect(tooltipManager.hoverShowTimeout).toBeNull();
  //   expect(tooltipManager.hoverHideTimeout).toBeNull();
  //   jest.runAllTimers();
  //   expect(setOpenSpy).toHaveBeenCalledTimes(1);
  //   expect(setOpenSpy).toHaveBeenCalledWith(false);
  //   expect(tooltipManager.visibleTooltips).toBeNull();
  // });
  // it('will not show the first delayed tooltip if a second is delay shown before the first shows', () => {
  //   jest.useFakeTimers();
  //   let tooltipManager = new TooltipManager();
  //   let setOpenSpy = jest.fn();
  //   let tooltip = {open: false, setOpen: setOpenSpy, tooltipManager};
  //   let triggerId = 'triggerId-1';
  //   tooltipManager.showTooltipDelayed(tooltip, triggerId);
  //   expect(tooltipManager.hoverShowTimeout).not.toBeNull();
  //   expect(tooltipManager.hoverHideTimeout).toBeNull();
  //   jest.advanceTimersByTime(100);
  //   expect(tooltipManager.visibleTooltips).toBeNull();
  //   expect(tooltipManager.hoverShowTimeout).not.toBeNull();
  //   expect(tooltipManager.hoverHideTimeout).toBeNull();
  //   let timer1 = tooltipManager.hoverShowTimeout;
  //   let setOpenSpy2 = jest.fn();
  //   let tooltip2 = {open: false, setOpen: setOpenSpy2, tooltipManager};
  //   let triggerId2 = 'triggerId-2';
  //   tooltipManager.showTooltipDelayed(tooltip2, triggerId2);
  //   expect(clearTimeout).toHaveBeenCalledWith(timer1);
  //   expect(tooltipManager.hoverShowTimeout).not.toBeNull();
  //   expect(tooltipManager.hoverHideTimeout).toBeNull();
  //   // run past first tooltips show timer and make sure that we didn't show it
  //   jest.advanceTimersByTime(150);
  //   expect(tooltipManager.visibleTooltips).toBeNull();
  //   // finish all the timers
  //   jest.runAllTimers();
  //   expect(setOpenSpy).not.toHaveBeenCalled();
  //   expect(setOpenSpy2).toHaveBeenCalledWith(true);
  //   expect(tooltipManager.visibleTooltips).toStrictEqual({triggerId: triggerId2, state: tooltip2});
  // });
  // it('will immediately hide the currently delay hiding tooltip if a new one is getting shown', () => {
  //   jest.useFakeTimers();
  //   let tooltipManager = new TooltipManager();
  //   let setOpenSpy = jest.fn();
  //   let tooltip = {open: false, setOpen: setOpenSpy, tooltipManager};
  //   let triggerId = 'triggerId-1';
  //   tooltipManager.showTooltip(tooltip, triggerId);
  //   let setOpenSpy2 = jest.fn();
  //   let tooltip2 = {open: false, setOpen: setOpenSpy2, tooltipManager};
  //   let triggerId2 = 'triggerId-2';
  //   tooltipManager.hideTooltipDelayed();
  //   expect(tooltipManager.hoverHideTimeout).not.toBeNull();
  //   let timer1 = tooltipManager.hoverHideTimeout;
  //   jest.advanceTimersByTime(100);
  //   tooltipManager.showTooltipDelayed(tooltip2, triggerId2);
  //   expect(clearTimeout).toHaveBeenCalledWith(timer1);
  //   expect(tooltipManager.hoverHideTimeout).toBeNull();
  //   expect(tooltipManager.visibleTooltips).toBeNull();
  //   expect(tooltipManager.hoverShowTimeout).not.toBeNull();
  //   jest.runAllTimers();
  //   expect(tooltipManager.visibleTooltips).toStrictEqual({triggerId: triggerId2, state: tooltip2});
  //   expect(tooltipManager.hoverHideTimeout).toBeNull();
  //   expect(tooltipManager.hoverShowTimeout).toBeNull();
  // });
});
